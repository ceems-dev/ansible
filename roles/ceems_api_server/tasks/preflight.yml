---
- name: Assert usage of systemd as an init system
  ansible.builtin.assert:
    that: ansible_service_mgr == 'systemd'
    msg: This role only works with systemd

- name: Install package fact dependencies
  become: true
  ansible.builtin.package:
    name: "{{ _pkg_fact_req }}"
    state: present
  when: (_pkg_fact_req)
  vars:
    _pkg_fact_req: "{% if (ansible_pkg_mgr == 'apt') %}\
      {{ ('python-apt' if ansible_python_version is version('3', '<') else 'python3-apt') }}
      {% else %}\
      {% endif %}"

- name: Gather package facts
  ansible.builtin.package_facts:
  when: not 'packages' in ansible_facts

- name: Naive assertion of proper listen address
  ansible.builtin.assert:
    that:
      - >-
        [ceems_api_server_web_listen_address] |
          flatten |
          reject('match', '.+:\\d+$') |
          list |
          length == 0

- name: Assert that config is set
  ansible.builtin.fail:
    msg: ceems_api_server_config is invalid
  when: item is not defined
  loop:
    - ceems_api_server_config
    - ceems_api_server_config.data
    - ceems_api_server_config.data.path

- name: Assert that TLS config is correct
  when: ceems_api_server_tls_server_config | length > 0
  block:
    - name: Assert that TLS key and cert path are set
      ansible.builtin.assert:
        that:
          - ceems_api_server_tls_server_config.cert_file is defined
          - ceems_api_server_tls_server_config.key_file is defined

    - name: Check existence of TLS cert file
      ansible.builtin.stat:
        path: "{{ ceems_api_server_tls_server_config.cert_file }}"
      register: __ceems_api_server_cert_file

    - name: Check existence of TLS key file
      ansible.builtin.stat:
        path: "{{ ceems_api_server_tls_server_config.key_file }}"
      register: __ceems_api_server_key_file

    - name: Assert that TLS key and cert are present
      ansible.builtin.assert:
        that:
          - "{{ __ceems_api_server_cert_file.stat.exists }}"
          - "{{ __ceems_api_server_key_file.stat.exists }}"

- name: Check if ceems_api_server is installed
  ansible.builtin.stat:
    path: "{{ ceems_api_server_binary_install_dir }}/ceems_api_server"
  register: __ceems_api_server_is_installed
  check_mode: false
  tags:
    - ceems_api_server_install

- name: Gather currently installed ceems_api_server version (if any)
  ansible.builtin.command: "{{ ceems_api_server_binary_install_dir }}/ceems_api_server --version"
  changed_when: false
  register: __ceems_api_server_current_version_output
  check_mode: false
  when: __ceems_api_server_is_installed.stat.exists
  tags:
    - ceems_api_server_install

- name: Discover latest version
  ansible.builtin.set_fact:
    ceems_api_server_version: "{{ (lookup('url', 'https://api.github.com/repos/{{ _ceems_api_server_repo }}/releases/latest', headers=_github_api_headers, split_lines=False)
      | from_json).get('tag_name') | replace('v', '') }}"
  run_once: true
  until: ceems_api_server_version is version('0.0.0', '>=')
  retries: 10
  when:
    - ceems_api_server_version == "latest"
    - ceems_api_server_binary_local_dir | length == 0
    - not ceems_api_server_skip_install

- name: Discover data path and backup path
  ansible.builtin.set_fact:
    _ceems_api_server_data_path: "{{ ceems_api_server_config['data']['path'] }}"
    _ceems_api_server_data_backup_path: "{{ ceems_api_server_config['data']['backup_path'] if 'backup_path' in ceems_api_server_config['data'].keys() else '' }}"
  run_once: true

- name: Get ceems_api_server binary checksum
  when:
    - ceems_api_server_binary_local_dir | length == 0
    - not ceems_api_server_skip_install
  block:
    - name: Get checksum list from github
      ansible.builtin.set_fact:
        __ceems_api_server_checksums: "{{ lookup('url', ceems_api_server_checksums_url, headers=_github_api_headers, wantlist=True) | list }}"
      run_once: true
      until: __ceems_api_server_checksums is search('linux-' + go_arch + '.tar.gz')
      retries: 10

    - name: Get checksum for {{ go_arch }}
      ansible.builtin.set_fact:
        __ceems_api_server_checksum: "{{ item.split(' ')[0] }}"
      with_items: "{{ __ceems_api_server_checksums }}"
      when:
        - ('linux-' + go_arch + '.tar.gz') in item
